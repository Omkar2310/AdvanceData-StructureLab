/*
The symbol table is generated by compiler. From this perspective, the 14-12-2018 symbol table is a set of name-attribute pairs.
 In a symbol table for a compiler, the name is an identifier, and the attributes might include an initial value and a list of lines that use the identifier. Perform the following
operations on symbol table:
(1) Determine if a particular name is in the table
(2) Retrieve the attributes of that name
(3) Modify the attributes of that name
(4) Insert a new name and its attributes
(5) Delete a name and its attributes
(use chaining with replacement and without replacement)
*/

//============================================================================
// Name        : ass7.cpp
// Author      : Omkar Mankar
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include<string.h>
#define MAX 10
using namespace std;
class node
{
public:
	string key;
	string value;
	string data;
};
class symbol
{
	node arr[MAX];
	int chain[MAX];
public:
	symbol()
	{
		for(int i=0;i<MAX;i++)
		{
			chain[i]=-1;
			arr[i].key=" ";
			arr[i].value=" ";
			arr[i].data=" ";
		}
	}
	void display()
	{
		for(int i=0;i<MAX;i++)
		{
			cout<<chain[i]<<" \t "<<arr[i].key<<" \t "<<arr[i].data<<" "<<arr[i].value<<endl;
		}
	}
	int hashfun(char x)
	{
		return x%97;
	}
	void createwithout(string x)
	{
		string val;
		string info;
		int ind;
		ind=hashfun(x.at(0));
		cout<<"Enter Datatype/Token/Identifier\n";
		cin>>info;
		cout<<"Enter value\n";
		cin>>val;
		for(int i=0;i<MAX;i=(i+1)%MAX)
		{
			if(i==ind)
			{
				if(arr[i].key==" ")
				{
					arr[i].key=x;
					arr[i].value=val;
					arr[i].data=info;
					return;
				}
				else
				{
					for(int k=i+1;k<MAX;k++)
					{
						int p;
						if(arr[k].key==" ")
						{
							arr[k].key=x;
							arr[k].value=val;
							arr[k].data=info;
							for(int j=0;j<MAX;j++)
							{
								if(ind==hashfun(arr[j].key.at(0)) && chain[j]==-1)
								{
									p=j;
									chain[p]=k;
									break;

								}
								else
								{
									continue;
								}
							}
							chain[k]=-1;
							return;
						}
						else
						{
							continue;
						}
					}
				}
			}
			else
			{
				continue;
			}
		}
	}
	void search()
	{
		string m;
		cout<<"ENter key to search"<<endl;
		cin>>m;
		int p;
		p=search1(m);
		if(p==-1)
		{
			cout<<"KEY not found\n";
			return;
		}
		else
		{
			cout<<"KEY FOUND\n";
			cout<<arr[p].key<<" "<<arr[p].data<<" "<<arr[p].value<<endl;
			return;
		}
	}
	int search1(string x)
	{
		//x is key to delete
		int ind=hashfun(x.at(0));
		for(int i=0;i<MAX;i++)
		{
			if(hashfun(arr[i].key.at(0))==ind && arr[i].key==x)
			{
				return i;
			}
		}
		return -1;
	}
	void del()
	{
		string m;
		cout<<"ENter a key to delete\n";
		cin>>m;
		delete1(m);
	}
	void delete1(string x)
	{
		int s;
		int p=search1(x);
		if(p==-1)
		{
			cout<<"KEY not found"<<endl;
			return;
		}
		arr[p].key=arr[p].data=arr[p].value=" ";
		while(1)
		{
			if(chain[p]==-1)
			{
			break;
			}
			else
			{
				s=chain[p];
				if(s!=-1)
				{
					arr[p].key=arr[s].key;
					arr[p].data=arr[s].data;
					arr[p].value=arr[s].value;
					chain[p]=chain[s];
					arr[s].key=arr[s].data=arr[s].value=" ";
					chain[s]=-1;
				}
			}
		}
		return;
	}
	void createwith(string x)
	{
		int ind=hashfun(x.at(0));
		string info,val;
		cout<<"Enter Datatype/Token/Identifier\n";
		cin>>info;
		cout<<"Enter value\n";
		cin>>val;
		for(int i=0;i<MAX;i=(i+1)%MAX)
		{
			if(i==ind)
			{
				if(arr[i].key==" ")
				{
					arr[i].key=x;
					arr[i].value=val;
					arr[i].data=info;
					return;
				}
				else if(hashfun(arr[i].key.at(0))!=ind)
				{
					int p=-1;
					int ind2=hashfun(arr[i].key.at(0));
					for(int j=0;j<MAX;j++)
					{
						if(arr[j].key==" ")
						{
							arr[j].key=arr[i].key;
							arr[j].value=arr[i].value;
							arr[j].data=arr[i].data;
							chain[j]=chain[i];
							arr[i].key=x;
							arr[i].value=val;
							arr[i].data=info;
							chain[i]=-1;
							for(int k=0;k<MAX;k++)
							{
							if(ind2==hashfun(arr[k].key.at(0)) && chain[k]!=-1)
							{
								p=k;
								break;
							}
							}
							if(p!=-1)
							{
								chain[p]=j;
							}
							return;
						}
						else
						{
							continue;
						}
					}
				}
				else
				{
					int s;
					for(int k=0;k<MAX;k++)
					{
					if(ind==hashfun(arr[k].key.at(0)) && chain[k]==-1)
						{
							s=k;
							break;
						}
						else
						{
							s=-1;
						}
					}
					for(int j=0;j<MAX;j++)
					{
						if(arr[j].key==" ")
						{
							arr[j].key=x;
							arr[j].value=val;
							arr[j].data=info;
							if(s!=-1)
							{
								chain[s]=j;
							}
							else
							{
								chain[j]=-1;
							}
							return;
						}
					}

				}
			}
		}
	}
};
int main()
{
	symbol *s;
	symbol s1,s2;
	string p;
		int k,r,a;
		do
		{
			cout<<"1.Without Replacement\n2.With replacement\nEnter ur choice";
			cin>>r;
			if(r==1)
			{
				s=&s1;
			}
			else
			{
				s=&s2;
			}
			switch(r)
			{
				case 1:
					do
					{
						cout<<"1.Insert\n2.Display\n3.Search\n4.Update\n5.Delete\nEnter your choice\n";
						cin>>k;
						switch(k)
						{
							case 1:
								cout<<"Enter key\n";
								cin>>p;
								s->createwithout(p);
								break;
							case 2:
								s->display();
								break;
							case 3:
								s->search();
								break;
							case 4:
								cout<<"Enter key to update\n";
								cin>>p;
								break;
							case 5:
								s->del();
								break;
						}
					}while(k!=0);
					break;
					case 2:
					do
					{
						cout<<"1.Insert\n2.Display\n3.Search\n4.Update\n5.Delete\nEnter your choice\n";
						cin>>a;
						switch(a)
						{
							case 1:
								cout<<"Enter key\n";
								cin>>p;
								s->createwith(p);
								break;
							case 2:
								s->display();
								break;
							case 3:
								s->search();
								break;
							case 4:
								cout<<"Enter key to update\n";
								cin>>p;
								break;
							case 5:
								s->del();
								break;
						}
					}while(a!=0);
					break;

			}
		}while(r!=0);
}
